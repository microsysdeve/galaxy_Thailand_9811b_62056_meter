
#define __MAIN__
#define VAREXT

#include "Include.h"
__root const unsigned char __code codepsword[1024]@0x400=
{ 
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
};





/*=========================================================================================\n
* @function_name: Init_Var
* @function_file: main.c
* @描述: 初始化系统全局变量和参数
*
* @参数:
* @返回:
* @作者:
* @备注:
*-------------------------------------------------------------------------------------------
* @修改人:  Lm (2015-2-3)
* @修改内容:
===========================================================================================*/
void Init_Var(void)
{
    gui_SystemEvent = 0;    //系统事件标志 
    guc_TimeEvent=0;        //时间事件标志
    gui_RefreshEvent=0;     //参数刷新事件标志
    guc_KeyEvent=0;         //按键事件标志
    guc_DjCheckFlg=0;       //冻结事件标志
    gui_SystemSleepState=0; //系统休眠标志
    guc_CheckBatFlg=false;  //测电池状态 
    guc_RtcConflict=0;      
    guc_BodeDely=0;
    guc_PluseCount=0;       //输出切换信号计时，10ms
    guc_CfOpenFlg=true;     //上电开CF标志
    guc_OpenCfTmCnt=0;      //上电开CF计时，1S
    guc_CoverKeyDwCnt=0;
    guc_ShowStCom=0;
    gs_SysRunSt.PluseType=0;
    //guc_ErrCodeCnt=0;
    //guc_ErrBtnFlag=false;
    //guc_ShowErrEndFlag=false;
    gut_SysWarn.byte=0;
    //电表运行状态字
    gs_MeterState.ui_MeterState1.Word.word=0;
    gs_MeterState.ui_MeterState2.Word.word=0;
    gs_MeterState.ui_MeterState3.Word.word&=0x0021;
    gs_MeterState.ui_MeterState4.Word.word=0;
    gs_MeterState.ui_MeterState5.Word.word=0;
    gs_MeterState.ui_MeterState6.Word.word=0;
    gs_MeterState.ui_MeterState7.Word.word&=0x0200;
    guc_ComSendDy=0;        //通讯延时，10ms
    guc_FrsCalRTCDelay=5;   //上电测RTC倒计时，1S
    guc_SecCnt=0;           //节拍计时，10ms
    guc_PrOutTm=0;          //编程与闭锁退出计时，1S
    guc_Timechange=0x55;    //负荷记录时间变化
    //电池校正处理
    BE_ReadP(EEP_BATCAL, XDATA_RAMZONE, 4);
    if(Uint8_To_Uint16(XDATA_RAMZONE+2) != do_CRC(XDATA_RAMZONE,2))
    {
        gi_BatCal = 0;
    }
    else
    {
        gi_BatCal = Uint8_To_Uint16(XDATA_RAMZONE); 
    }
    guc_GiantSCPflag=0;   //大电流补偿
    
    guc_wdtFlg = 0;//喂狗标志位
    guc_wdtCnt = 0;//喂狗计时
    
    CLRWDT();
    DataProcRead2Slice(KBGJLID,0,0,12,XDATA_RAMZONE);               //读取最近一次开表盖记录时间
    MemSet(XDATA_RAMZONE+12, 0x00, 6);
    if( ApiBufCmp(XDATA_RAMZONE, XDATA_RAMZONE+12, 6) == CMP_EQU ) //开表盖时间全为0
    {
      guc_CoverStatus = PowerOn|CoverClose;
    }else
    {
      if( ApiBufCmp(XDATA_RAMZONE+6, XDATA_RAMZONE+12, 6) == CMP_EQU ) //合表盖时间全为0
      {
        guc_CoverStatus = PowerOn|CoverOpen;      //有电开
      }else
      {
        guc_CoverStatus = PowerOn|CoverClose;
      }
    }
}

/*=========================================================================================\n
* @function_name: SysEventProc
* @function_file: main.c
* @描述: 系统事件处理流程
* 
* @参数: 
* @返回: 
* @作者:   lwb (2012-05-09)
* @备注: 
*-------------------------------------------------------------------------------------------
* @修改人:  
* @修改内容: 
===========================================================================================*/
void SysEventProc(void)
{
    if(gui_SystemEvent & flgEtGlb_PowDown)              
    {                                                   
        Pow_DnProc();                  //掉电处理
        gui_SystemEvent &=~ flgEtGlb_PowDown;           
        gui_SystemSleepState=0x55aa;
        //while(1);                                       //睡眠不成功，等待开门狗复位
    }                                                   
    else if(gui_SystemEvent & flgEtGlb_EnergyCalc)      
    {                                                   
        Eny_EnergyProc();                               // 能量事件
        gui_SystemEvent &=~ flgEtGlb_EnergyCalc;        
    }                                                   
    else if(gui_SystemEvent & flgEtGlb_RefreshLcd)      
    {                                                   
        ShowRefresh();                                  // 显示刷新
        gui_SystemEvent &=~ flgEtGlb_RefreshLcd;        
    }                                                   
    else if(gui_SystemEvent & flgEtGlb_NeedPrtclChk)    
    {                                                   
        ComApp_Proc();                                  // 通讯事件
        gui_SystemEvent &=~flgEtGlb_NeedPrtclChk;       
    }else if( gui_SystemEvent&flgEtGlb_ClearEv)         //清零事件事件
    {
        Data_ClearEvent();
        gui_SystemEvent&=~flgEtGlb_ClearEv;
    }else if(gui_SystemEvent&flgEtGlb_ClearMeter)
    {
        Data_ClearMeter();
        gui_SystemEvent&=~flgEtGlb_ClearMeter;
    }
    else
    {
        gui_SystemEvent = 0;                            //防止出错时,整个循环下面的处理永远被挂起
    }
}
/*=========================================================================================\n
* @function_name: TimeEventProc
* @function_file: main.c
* @描述: 系统时间事件处理
* 
* @参数: 
* @返回: 
* @作者:   lwb (2012-05-09)
* @备注: 
*-------------------------------------------------------------------------------------------
* @修改人:  
* @修改内容: 
===========================================================================================*/
void TimeEventProc(void)
{
    if(guc_TimeEvent & flgEtTim_Second)                 // 秒处理
    {          
        TimerProc();                                    // 在停电和有电下均处理
        EnyB_Open_Cf();
        ShowSecondProc();
        EnyB_Check_PowRev();                            //功率方向判断
        EnyB_Check_OC();
#ifdef FRCom
        EventOutProc();
#endif
        guc_TimeEvent |= flgEtTim_SecSoft;
        guc_TimeEvent &= ~flgEtTim_Second;              //
    }
    else if(guc_TimeEvent&flgEtTim_Minute)
    {
         Data_MinProc();
         guc_TimeEvent&=~flgEtTim_Minute;
    }                                                   //
    else if(guc_TimeEvent & flgEtTim_Hour)              // 小时事件
    {                                                   //
        Data_HourProc();
        guc_TimeEvent &= ~flgEtTim_Hour;                //
    }else if(guc_TimeEvent & flgEtTim_Day)
    {
        Data_DayProc();
        guc_TimeEvent &=~flgEtTim_Day;
    }
    else if(guc_TimeEvent & flgEtTim_SecSoft)
    {
        BgCtrFun();
        MChannelCal();                                  // 测试M
        CoverKeyScan();
        guc_TimeEvent &= ~flgEtTim_SecSoft;
    }
    else                                                //
    {                                                   //
        guc_TimeEvent = 0;                              //  
    }
}
/*=========================================================================================\n
* @function_name: main
* @function_file: main.c
* @描述: 入口主函数
*
* @参数:
* @返回:
* @作者:
* @备注:
*-------------------------------------------------------------------------------------------
* @修改人:  Lwb (2011-7-20)
* @修改内容:
===========================================================================================*/
__near_func void main(void)
{
    uint8 temp;
MAINSTART:
#ifndef V9811S
    SPCFNC=1;               //调整FLASH功耗
    XBYTE[0x0402]=0x86;
    SPCFNC=0;
#endif
    if(Pow_UpProc() == false)
    {
        goto MAINSTART;
    }
    CtrlM &=(~BIT7);//5V的时候POWSWT_ENN置0
    InitCLRWDT();
    FWC=0;
    FSC=0;
    SetPLL800K();
    temp=SetPLL13M();
    if(temp==0)
    {
        goto MAINSTART;
    }

    for(temp=0; temp<20; temp++)
    {
        InitCLRWDT();           //喂狗
        DelayOSC(187);          //20ms延时
//      DelayOSC(187);
        if(POWERSTATE())
        {
            CtrlM |= BIT7; //3.3V的时候POWSWT_ENN置1
            IOOFF();                            //关闭所有额外的IO
            MCUForPowerOff();
            IntOFF();                           //关闭中断，清除中断标记
            UARTOFF();                          //关闭所有UART
            RTCWakeUpTm(RTC_HOUR);                          //1hour唤醒
            if(Sleep()==false)
            {
                goto MAINSTART;
            }
        }        
    }
    InitCLRWDT();           //喂狗
    CPUInit();              //系统初始化
    InitCLRWDT();           //喂狗
    Disp_Full();            //显示全屏
#if (SysMode_TEST == 1)
    RecoverTestTime();
#endif    
    SleepTimeProc();
    Init_Var();             //初始化参数
    DataSecurityInit();
    InitCLRWDT();           //喂狗      
    EnyB_SetMeterRule();    //计量初始化
    PowUpLedCtl();
    InitCLRWDT();               //喂狗 
    Rpt_Recover();          //在主动上报数据恢复之前,不会恢复掉电
    GetBat();               //得到电池电压
    RecoverPara();
    InitCLRWDT();               //喂狗 
    CalPowDwTm();
    ShowSysStart();         //显示上电初始化
    getTimeZone();          //费率切换   
    EA=1;                   //开总中断

    while (1)
    {
        if(guc_wdtFlg)
        {
          CLRWDT();               //喂狗
          guc_wdtFlg = 0;
        }
        Check_Sfr();            //检测sfr
        if(0x00 != gui_SystemEvent)                      //
        {                                               //
            SysEventProc();                             // 系统事件
        }   
        else if(0x00 != guc_TimeEvent)                   //
        {                                               //
            TimeEventProc();                            // 时间处理流程
        }                                               //
        else if(0x00 != gui_RefreshEvent)                //
        {                                               //
            RefreshPara();                              // 参数刷新
        }                                               //
        else if(0x00 != guc_KeyEvent)                    //
        {                                               //
            KeyProc();                                  // 按键处理
        }
        else if(0x00 != guc_DjCheckFlg)
        {
            DjProc();
        }

        if(gui_SystemSleepState==0x55aa)
        {
            goto MAINSTART;
        }
     }
}